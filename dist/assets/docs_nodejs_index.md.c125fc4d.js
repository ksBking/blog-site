import{_ as s,c as a,o as e,a as n}from"./app.67e44571.js";const F=JSON.parse('{"title":"Node.js","description":"","frontmatter":{"group":"code","title":"Node.js"},"headers":[{"level":2,"title":"快捷链接","slug":"快捷链接","link":"#快捷链接","children":[]},{"level":2,"title":"什么是 Node.js？","slug":"什么是-node-js","link":"#什么是-node-js","children":[]},{"level":2,"title":"Node.js 的工作原理","slug":"node-js-的工作原理","link":"#node-js-的工作原理","children":[{"level":3,"title":"Node.js 体系结构","slug":"node-js-体系结构","link":"#node-js-体系结构","children":[]},{"level":3,"title":"安装和使用 Node.js","slug":"安装和使用-node-js","link":"#安装和使用-node-js","children":[]}]},{"level":2,"title":"为什么需要 Node.js？","slug":"为什么需要-node-js","link":"#为什么需要-node-js","children":[{"level":3,"title":"多用途技术","slug":"多用途技术","link":"#多用途技术","children":[]},{"level":3,"title":"JavaScript","slug":"javascript","link":"#javascript","children":[]},{"level":3,"title":"社区","slug":"社区","link":"#社区","children":[]},{"level":3,"title":"开源","slug":"开源","link":"#开源","children":[]}]},{"level":2,"title":"关于 Node.js","slug":"关于-node-js","link":"#关于-node-js","children":[]}],"relativePath":"docs/nodejs/index.md","lastUpdated":1666104568000}'),l={name:"docs/nodejs/index.md"},o=n(`<h1 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-hidden="true">#</a></h1><p>Node.js 是一个免费、开放、跨平台的 JavaScript 运行环境，允许开发者在浏览器之外编写命令行工具和服务器端脚本。</p><h2 id="快捷链接" tabindex="-1">快捷链接 <a class="header-anchor" href="#快捷链接" aria-hidden="true">#</a></h2><ul><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noreferrer">官方网站</a></li><li><a href="https://nodejs.dev/en/" target="_blank" rel="noreferrer">官方网站（新）</a></li><li><a href="https://nodejs.org/zh-cn/docs/" target="_blank" rel="noreferrer">官方文档</a></li><li><a href="https://nodejs.dev/en/download/" target="_blank" rel="noreferrer">官方文档（新）</a></li><li><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noreferrer">官网下载</a></li><li><a href="https://nodejs.dev/en/api/" target="_blank" rel="noreferrer">官网下载（新）</a></li></ul><h2 id="什么是-node-js" tabindex="-1">什么是 Node.js？ <a class="header-anchor" href="#什么是-node-js" aria-hidden="true">#</a></h2><p>Node.js（简称 Node）是开源服务器端 JavaScript 运行时环境。可以使用 Node.js 在浏览器以外的多个位置（例如服务器上）运行 JavaScript 应用程序和代码。</p><p>Node.js 是名为 <a href="https://nodejs.dev/en/learn/the-v8-javascript-engine/" target="_blank" rel="noreferrer">V8</a> 的 JavaScript 引擎的包装器，它支持许多浏览器，包括 Google Chrome、Opera 和 Microsoft Edge。通过在浏览器外使用 V8 引擎，可以使用 Node.js 来运行 JavaScript。Node.js 还包含在服务器上运行的应用程序可能需要的许多 V8 优化。例如，Node.js 添加了“缓冲区”类，使 V8 可以处理文件。这使 Node.js 成为了构建 Web 服务器等的不错选择。</p><p>即使你从未使用过 JavaScript 作为主要编程语言，也可选择它来编写功能强大的模块化应用程序。JavaScript 还具有一些独特的优势。例如，由于浏览器使用 JavaScript，因此你可以使用 Node.js 在浏览器和服务器之间共享窗体验证规则等逻辑。</p><p>随着单页应用程序的兴起，JavaScript 变得越来越重要，并支持广泛使用的 JavaScript 对象表示法（JSON）数据交换格式。许多 NoSQL 数据库技术（例如 CouchDB 和 MongoDB）也将 JavaScript 和 JSON 用作查询和架构格式。Node.js 使用许多新式服务和框架所使用的语言和技术。</p><p>可以使用 Node.js 生成以下类型的应用程序：</p><ul><li>HTTP Web 服务器</li><li>微服务或无服务器 API 后端</li><li>用于数据库访问和查询的驱动程序</li><li>交互式命令行接口</li><li>桌面应用程序</li><li>实时物联网（IoT）客户端和服务器库</li><li>适用于桌面应用程序的插件</li><li>用于文件处理或网络访问的 Shell 脚本</li><li>机器学习库和模型</li></ul><p>Node.js 环境还提供了一个 npm 注册表，可用于共享你自己的 Node.js 库。</p><h2 id="node-js-的工作原理" tabindex="-1">Node.js 的工作原理 <a class="header-anchor" href="#node-js-的工作原理" aria-hidden="true">#</a></h2><p>Node.js 基于单线程事件循环。此体系结构模型可高效地处理并发操作。并发是指事件循环在完成其他工作之后执行 JavaScript 回叫函数的能力。</p><p>在此体系结构模型中：</p><ul><li>单线程是指 JavaScript 只有一个调用堆栈，一次只能执行一项任务。</li><li>事件循环运行代码，收集和处理事件，并在事件队列中运行下一个子任务。</li></ul><p>此上下文中的线程是操作系统可以独立管理的单个编程指令序列。</p><p>在 Node.js 中，I/O 操作（例如，读取磁盘文件或对其写入，或者对远程服务器进行网络调用）被视为阻止操作。阻止操作会阻止所有后续任务，直到该操作完成，然后才能继续下一个操作。在非阻止模型中，事件循环可以同时运行多个 I/O 操作。</p><p>名称“事件循环”描述“忙碌-等待”机制的使用方式，该机制以同步方式等待消息到达，然后再处理消息。下面显示了一个事件循环实现：</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">process</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="node-js-体系结构" tabindex="-1">Node.js 体系结构 <a class="header-anchor" href="#node-js-体系结构" aria-hidden="true">#</a></h3><p>Node.js 使用事件驱动的体系结构，其中的事件循环处理编排，辅助角色池阻止任务。事件循环使 Node.js 能够处理并发操作。下图大致说明了事件循环的工作原理：</p><p><img src="https://learn.microsoft.com/zh-cn/training/advocates/intro-to-nodejs/media/event-loop.svg" alt="显示 Node.js 如何使用事件驱动的体系结构的关系图，其中的事件循环处理业务流程，辅助角色池阻止任务。"></p><p>事件循环的主要阶段包括：</p><ul><li>计时器处理由 setTimeout() 和 setInterval() 计划的回叫。</li><li>回叫运行挂起的回叫。</li><li>轮询检索传入的 I/O 事件并运行与 I/O 相关的回叫。</li><li>检查允许完成轮询阶段后立即运行回叫。</li><li>关闭回叫关闭事件（例如 socket.destroy()）和回叫（例如 socket.on(&#39;close&#39;, ...)）。</li></ul><p>Node.js 使用工作线程池来处理阻止任务，例如阻止 I/O 操作以及占用大量 CPU 的任务。</p><p>总而言之，事件循环运行为事件注册的 JavaScript 回叫，还负责实现非阻止异步请求（如网络 I/O）。</p><h4 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-hidden="true">#</a></h4><p>JavaScript 可以产生与低级语言（例如 C）相同的性能结果，因为 V8 引擎可以提高性能。Node.js 还利用了 JavaScript 独特的事件驱动特性，可以快速高效地编写服务器任务。</p><h4 id="异步编程" tabindex="-1">异步编程 <a class="header-anchor" href="#异步编程" aria-hidden="true">#</a></h4><p>为支持功能强大的基于事件的编程模型，Node.js 提供了一组内置的非阻止 I/O API 来处理文件系统和数据库操作等常见任务。这些 API 由 libuv 库提供。当你请求 Node.js 读取磁盘中的文件内容时，Node.js 不会阻止等待磁盘和文件描述符准备就绪。当文件准备就绪时，非阻止 I/O 接口将通知 Node.js。当触发鼠标或键盘事件，或者从远程终结点接收到 XMLHttpRequest（XHR）响应时，该非阻止 I/O 的工作方式与浏览器通知代码时的方式相同。</p><p><img src="https://learn.microsoft.com/zh-cn/training/advocates/intro-to-nodejs/media/architecture.svg" alt="显示 Node.js 用于处理常见任务的一组内置的非阻止 I/O API 的图表。"></p><h3 id="安装和使用-node-js" tabindex="-1">安装和使用 Node.js <a class="header-anchor" href="#安装和使用-node-js" aria-hidden="true">#</a></h3><p>可以通过多种方式来安装 Node.js。以下介绍了一些最常见的方式：</p><ul><li><p>通过可执行文件进行安装：Node.js 下载页 <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noreferrer">https://nodejs.org/zh-cn/download/</a> 提供不同操作系统的安装包。</p></li><li><p>通过 Brew 安装：<a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a>（简称 Brew）是适用于 Linux 和 macOS 的常用包管理器。</p></li><li><p>通过 nvm 安装：<a href="https://nodejs.org/en/download/package-manager/#nvm" target="_blank" rel="noreferrer">节点版本管理器（nvm）</a>不仅有助于安装所需的 Node.js 版本，还有助于管理安装。本部分不会介绍 nvm 选项。</p></li></ul><h4 id="通过可执行文件进行安装" tabindex="-1">通过可执行文件进行安装 <a class="header-anchor" href="#通过可执行文件进行安装" aria-hidden="true">#</a></h4><p>以下页面摘录自<code>https://nodejs.org/zh-cn/download/</code>下载位置中的“安装”页：</p><p><img src="https://learn.microsoft.com/zh-cn/training/advocates/intro-to-nodejs/media/install-page.png" alt="Node.js 安装页的屏幕截图，显示可用安装程序和源代码。"></p><p>请注意不同操作系统（如 Windows、macOS 和 Linux）可使用的各种安装程序。 你还可以下载两个不同的源代码版本：</p><ul><li><p>LTS 是长期支持的缩写，被描述为“推荐给大多数用户”。LTS 适用于可能无法进行频繁更新或不需要频繁更新的企业。</p></li><li><p>当前表示源代码处于积极开发阶段。 可能会添加功能以及出现中断性变更。 代码应遵循语义版本控制。</p></li></ul><p>根据你的公司的要求选择版本。 例如，如果需要经常更新，则当前版本可能适合你。</p><p>若要详细了解各种版本类型，请参阅<a href="https://github.com/nodejs/node#release-types" target="_blank" rel="noreferrer">版本类型</a>。</p><h4 id="验证安装" tabindex="-1">验证安装 <a class="header-anchor" href="#验证安装" aria-hidden="true">#</a></h4><p>安装 Node.js 后，请在终端中运行以下命令以验证安装是否成功：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--version</span></span>
<span class="line"></span></code></pre></div><p>该命令应以以下格式显示当前版本：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">v[major version].[minor version].[patch version]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>此示例中的括号 <code>[]</code> 指示结果可能会有所不同，具体取决于系统上安装的版本。</p><h2 id="为什么需要-node-js" tabindex="-1">为什么需要 Node.js？ <a class="header-anchor" href="#为什么需要-node-js" aria-hidden="true">#</a></h2><p>Node.js 是许多公司、初创公司和政府组织使用最广泛的技术之一。 其中包括 Netflix、Trello、Walmart、Uber、eBay 和 NASA 等大型企业。</p><p>Node.js 是 JavaScript 运行时，特殊情况下可以在服务器上（通常是在非浏览器位置上）运行 JavaScript 应用程序和代码。 Node.js 是基于事件驱动的 I/O 范例的单线程、非阻止的运行时。 非阻止特性具有重要意义，例如，当远程客户端发出请求时，使用 JavaScript 编写并在 Node.js 上运行的服务器将处理该请求，然后构造并返回响应，接着继续处理下一个请求，不会进行阻止且无需等待其他任务完成。</p><h3 id="多用途技术" tabindex="-1">多用途技术 <a class="header-anchor" href="#多用途技术" aria-hidden="true">#</a></h3><p>Node.js 可用于构建各种可直接用于生产的应用程序。 这些应用的范围从传统的轻量级大流量聊天程序到命令行工具和 Web 服务器。 Node.js 经过重新设计，可以处理大量并发请求。</p><h3 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-hidden="true">#</a></h3><p>“所有可以使用 JavaScript 编写的应用程序最终都将使用 JavaScript 编写。” – Jeff Atwood，作者、企业家、StackOverflow 的联合创始人。</p><p>如今，许多非浏览器位置上的应用程序都是使用 JavaScript 编写的，或者支持 JavaScript 作为优先语言，包括：</p><ul><li>Visual Studio Code 和 Atom 等代码编辑器，是使用 JavaScript 或 TypeScript（具有静态类型的 JavaScript 的超集）编写的。 这些编辑器可以运行嵌入式版本的 Node.js 运行时。</li><li>许多物联网 (IoT) 和实时应用程序，是使用 JavaScript 编写的，并且基于 Node.js 在服务器或者通过微控制器和芯片上系统 (SoC) 平台（例如 Puck.js 或 Tessel）运行。</li><li>NativeScript 等技术，可以使用 JavaScript 或 TypeScript 构建高性能的本机移动应用程序。</li><li>许多应用程序，在其插件系统（例如 Sketch、Adobe XD 和 Google Apps Script）中使用 JavaScript。</li></ul><h3 id="社区" tabindex="-1">社区 <a class="header-anchor" href="#社区" aria-hidden="true">#</a></h3><p>社区已为 Node.js 构建了逾一百万个模块和库，并将这些模块和库发布到了节点包管理器 (npm)。 开发人员可以轻松下载这些模块并将其集成到他们的现有项目中。 可在 Node.js 上运行的应用程序包括命令行工具、框架、Web 服务器等。</p><h3 id="开源" tabindex="-1">开源 <a class="header-anchor" href="#开源" aria-hidden="true">#</a></h3><p>Node.js 是受 OpenJS Foundation 支持的开源技术。 一个活跃的大型开源社区和其中的贡献者正在不断努力改进和优化该技术。 顶级社区委员会在社区发展工作方面具有权威。</p><h2 id="关于-node-js" tabindex="-1">关于 Node.js <a class="header-anchor" href="#关于-node-js" aria-hidden="true">#</a></h2><p>作为一个异步事件驱动的 JavaScript 运行时，Node.js 被设计用来构建可扩展的网络应用。在下面的“Hello World”示例中，可以并发处理许多连接，每一个连接都会触发一个回调，而当没有可做的事情时，Node.js 就会进入休眠状态。</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> hostname </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">127.0.0.1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> port </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> server </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(port</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hostname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Server running at http://</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">hostname</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这与当今比较常见的采用操作系统线程的并发模型形成了鲜明对比。基于线程的网络效率相对较低且更难以使用。此外，由于没有锁，Node.js 的用户不用担心进程死锁的问题。Node.js 中几乎没有函数直接执行 I/O 操作（除非你使用 Node.js 标准库中的同步函数版本），其进程从不会被阻塞，因此用 Node.js 来开发可扩展系统是非常合理的。</p><p>如果你对上面的描述有一些不理解地方，这里有一篇专门关于<a href="https://nodejs.org/zh-cn/docs/guides/blocking-vs-non-blocking/" target="_blank" rel="noreferrer">阻塞对比非阻塞</a>的文章供你参考。</p><hr><p>Node.js 在设计上类似于 Ruby 的 <a href="https://github.com/eventmachine/eventmachine" target="_blank" rel="noreferrer">Event Machine</a> 或 Python 的 <a href="https://twistedmatrix.com/trac/" target="_blank" rel="noreferrer">Twisted</a> 之类的系统。但 Node.js 更深入地考虑了事件模型，它将<a href="https://twistedmatrix.com/trac/" target="_blank" rel="noreferrer">事件循环</a>作为一个运行时结构而不是作为一个库来呈现。在其他系统中，总是有一个阻塞调用来启动事件循环。通常情况下，要执行的行为是通过脚本开始时的回调来定义的，然后通过<code>EventMachine::run()</code>这样的阻塞调用来启动服务器。而在 Node.js 中，没有这种启动事件循环的调用。Node.js 在执行输入脚本后直接进入事件循环，当没有更多的回调要执行时，Node.js 就会退出事件循环。这种行为就像浏览器的 JavaScript 一样——事件循环对用户是隐藏的。</p><p>HTTP 是 Node.js 中的一等公民，设计时考虑到了流式和低延迟，这使得 Node.js 非常适合作为网络库或框架的基础。</p><p>Node.js 被设计成单线程运行，但这并不意味着你无法利用到 CPU 的多个核心。你可以通过 <a href="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options" target="_blank" rel="noreferrer">child_process.fork()</a> API 来生成子进程，并且它被设计成非常易于通信。而建立在同一个接口之上的 <a href="https://nodejs.org/api/cluster.html" target="_blank" rel="noreferrer">cluster</a> 模块允许你在进程之间共享套接字（sockets），以实现核心的负载均衡。</p>`,70),p=[o];function r(t,c,i,d,h,D){return e(),a("div",null,p)}const j=s(l,[["render",r]]);export{F as __pageData,j as default};
